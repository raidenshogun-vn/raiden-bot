// üìÑ saveChannelChatHistory.js
// üß† M·ª•c ƒë√≠ch: L∆∞u l·ªãch s·ª≠ chat c·ªßa 1 channel trong server (theo serverId + channelId)
// üì• ƒê·∫ßu v√†o: serverId, channelId, chatData = { messageId, userId, username, displayName, message }
// üì§ ƒê·∫ßu ra: kh√¥ng tr·∫£ v·ªÅ, ch·ªâ l∆∞u DB
// üß© Ph·ª• thu·ªôc: models/ServerChatHistory

const ServerChatHistory = require('../../models/ServerChatHistory');

async function saveChannelChatHistory(serverId, channelId, chatData) {
  try {
    const { messageId, userId, username, displayName, message } = chatData;

    if (!messageId || !message) {
      console.warn('‚ö†Ô∏è Thi·∫øu messageId ho·∫∑c message trong chatData');
      return;
    }

    let channelHistory = await ServerChatHistory.findOne({ serverId, channelId });

    if (!channelHistory) {
      // N·∫øu ch∆∞a c√≥ document, t·∫°o m·ªõi
      channelHistory = new ServerChatHistory({
        serverId,
        channelId,
        chats: [],
        mode: null // c√≥ th·ªÉ set theo nhu c·∫ßu n·∫øu mu·ªën
      });
    }

    const newChat = {
      messageId,
      userId,
      username,
      displayName,
      message,
      timestamp: new Date()
    };

    channelHistory.chats.push(newChat);

    // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng l·ªãch s·ª≠ chat (n·∫øu c·∫ßn)
    if (channelHistory.chats.length > 1000) {
      channelHistory.chats = channelHistory.chats.slice(-1000);
    }

    await channelHistory.save();
  } catch (error) {
    console.error('‚ùå Error saving channel chat history:', error);
  }
}

module.exports = saveChannelChatHistory;
