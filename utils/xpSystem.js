const UserXP = require('../models/UserXP');
const { createLevelCard } = require('../utils/levelCard');
const levelRoles = require('../config/levelRoles/raiden');

const config = {
  enabled: true,
  xpNormal: 10,
  xpBonus: 100,
  cooldownNormal: 10 * 1000, // 10 gi√¢y
  cooldownBonus: 60 * 1000   // 60 gi√¢y
};

// üî¢ H√†m t√≠nh c·∫•p ƒë·ªô t·ª´ XP theo c√¥ng th·ª©c: x^2 * 100 + x * 1000
function getLevelFromXP(xp) {
  let level = 1;
  while (true) {
    const requiredXP = level * level * 100 + level * 1000;
    if (xp < requiredXP) break;
    level++;
  }
  return level - 1;
}

// üî¢ H√†m t√≠nh t·ªïng XP c·∫ßn ƒë·ªÉ l√™n c·∫•p x
function getXPForLevel(level) {
  return level * level * 100 + level * 1000;
}

/**
 * @param {Message} message
 * @param {boolean} isTalkingToBot
 */
async function handleLeveling(message, isTalkingToBot = false) {
  if (!config.enabled) return;
  const { member, guild } = message;
  if (!member || member.user.bot) return;

  const userId = member.id;
  const guildId = guild.id;
  const now = Date.now();

  let data = await UserXP.findOne({ userId, guildId });
  if (!data) {
    data = await UserXP.create({
      userId,
      guildId,
      xp: 0,
      level: 1,
      lastMessage: 0,
      lastIsBonus: false
    });
  }

  const cooldown = isTalkingToBot ? config.cooldownBonus : config.cooldownNormal;
  const timeSinceLast = now - (data.lastMessage || 0);

  // Ki·ªÉm tra cooldown
  if (timeSinceLast < cooldown) return;

  // N·∫øu v·ª´a n√≥i chuy·ªán v·ªõi bot xong th√¨ ph·∫£i ch·ªù 60s ƒë·ªÉ ƒë∆∞·ª£c +10
  if (!isTalkingToBot && data.lastIsBonus && timeSinceLast < config.cooldownBonus) {
    return;
  }

  // ‚úÖ C·∫≠p nh·∫≠t XP
  data.lastMessage = now;
  data.lastIsBonus = isTalkingToBot;

  const xpToAdd = isTalkingToBot ? config.xpBonus : config.xpNormal;
  data.xp += xpToAdd;
  console.log(`üìà +${xpToAdd} XP cho ${member.user.tag} (${data.xp} XP hi·ªán t·∫°i)`);

  const newLevel = getLevelFromXP(data.xp);

  // N·∫øu l√™n c·∫•p
  if (newLevel > data.level) {
    data.level = newLevel;

    const roleName = levelRoles[newLevel] || 'Adventurer';
    const nextXP = getXPForLevel(newLevel + 1);

    // üèÜ T√≠nh rank d·ª±a tr√™n XP
    const allUsers = await UserXP.find({ guildId }).sort({ xp: -1 });
    const userRank = allUsers.findIndex(entry => entry.userId === userId) + 1;

    const notice = await message.reply(`üñåÔ∏è ƒêang x·ª≠ l√Ω l√™n c·∫•p...`);

    // L√†m s·∫°ch t√™n role cho hi·ªÉn th·ªã
    const cleanRoleName = roleName.replace(/[^\p{L}\p{N}\p{Zs}.,'‚Äô\-]/gu, '').trim();

    // üñºÔ∏è T·∫°o level card c√≥ c·∫£ rank
    const levelCard = await createLevelCard(
      member,
      newLevel,
      data.xp,
      nextXP,
      cleanRoleName,
      userRank
    );

    // G·ª≠i th√¥ng b√°o l√™n c·∫•p
    await message.channel.send({
      content: `üéâ **${member.user.username}** v·ª´a l√™n c·∫•p **${newLevel}** v√† tr·ªü th√†nh **${roleName}**!\nüèÜ Rank hi·ªán t·∫°i: **#${userRank}**`,
      files: [levelCard]
    });

    setTimeout(() => notice.delete().catch(() => {}), 5000);
    console.log('‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o l√™n c·∫•p level');

    // Th√™m role n·∫øu c√≥
    const role = guild.roles.cache.find(r => r.name === roleName);
    if (role) {
      try {
        await member.roles.add(role);
      } catch (err) {
        console.log(`‚ùå Kh√¥ng th·ªÉ th√™m role ${roleName} cho ${member.user.tag}`);
      }
    }
  }

  await data.save();
}

module.exports = { handleLeveling };
